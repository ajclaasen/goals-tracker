 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/goals", type: :request do
  let(:character) { create(:character) }

  # Goal. As you add validations to Goal, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:goal)
  }

  let(:invalid_attributes) {
    attributes_for(:goal).without(:text)
  }

  describe "GET /index" do
    it "renders a successful response" do
      character.goals.create! valid_attributes
      get character_goals_url(character)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      goal = character.goals.create! valid_attributes
      get character_goal_url(character, goal)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_character_goal_url(character)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      goal = character.goals.create! valid_attributes
      get edit_character_goal_url(character, goal)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Goal" do
        expect {
          post character_goals_url(character), params: { goal: valid_attributes }
        }.to change(Goal, :count).by(1)
      end

      it "redirects to the created goal" do
        post character_goals_url(character), params: { goal: valid_attributes }
        expect(response).to redirect_to(character_goal_url(character, Goal.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Goal" do
        expect {
          post character_goals_url(character), params: { goal: invalid_attributes }
        }.to change(Goal, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post character_goals_url(character), params: { goal: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { reward: 200 } }

      it "updates the requested goal" do
        goal = character.goals.create! valid_attributes
        patch character_goal_url(character, goal), params: { goal: new_attributes }
        goal.reload
        expect(goal.reward).to eq 200
      end

      it "redirects to the goal" do
        goal = character.goals.create! valid_attributes
        patch character_goal_url(character, goal), params: { goal: new_attributes }
        goal.reload
        expect(response).to redirect_to(character_goal_url(character, goal))
      end
    end

    context "with invalid parameters" do
      # There are currently no ways to send invalid parameters in a PATCH request.
      # - Extra disallowed parameters get filtered out while the rest is accepted.
      # - Sending different types (i.e. reward = string) will be type converted internally and accepted.
      it "renders a successful response (i.e. to display the 'edit' template)" do
        skip("Add invalid parameters for PATCH requests.")
        goal = character.goals.create! valid_attributes
        patch character_goal_url(character, goal), params: { goal: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested goal" do
      goal = character.goals.create! valid_attributes
      expect {
        delete character_goal_url(character, goal)
      }.to change(Goal, :count).by(-1)
    end

    it "redirects to the goals list" do
      goal = character.goals.create! valid_attributes
      delete character_goal_url(character, goal)
      expect(response).to redirect_to(character_goals_url(character))
    end
  end
end
